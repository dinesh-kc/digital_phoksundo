# settings_app/forms.py
from django import forms
from .models import FiscalYear
from datetime import date as dt_date

import nepali_datetime

class NepaliDateField(forms.CharField):
    """
    A form field that takes Nepali date (YYYY-MM-DD) as input
    and converts it to AD date (datetime.date object) for Django model.
    """
    def to_python(self, value):
        if not value:
            return None
        if isinstance(value, dt_date): # Already an AD date (e.g., from model instance)
            return value
        try:
            # Assume input is Nepali date in YYYY-MM-DD format
            np_year, np_month, np_day = map(int, value.split('-'))
            np_date = nepali_datetime.date(np_year, np_month, np_day)
            return np_date.to_datetime_date() # Convert to AD datetime.date
        except (ValueError, nepali_datetime.NepaliDateError):
            raise forms.ValidationError(
                "Invalid Nepali date format. Enter in YYYY-MM-DD (e.g., 2080-04-01)."
            )

    def prepare_value(self, value):
        """
        Convert AD date (datetime.date object) to Nepali date string (YYYY-MM-DD)
        for display in form fields (e.g., when editing an existing FiscalYear).
        """
        if isinstance(value, dt_date):
            try:
                np_date = nepali_datetime.date.from_datetime_date(value)
                return np_date.strftime('%Y-%m-%d')
            except nepali_datetime.NepaliDateError:
                return "" # Return empty if conversion fails (e.g., AD date out of Nepali range)
        return value # For initial empty values or non-date inputs


class FiscalYearAdminForm(forms.ModelForm):
    start_date_ad = NepaliDateField(
        label="Start Date (Nepali)",
        widget=forms.TextInput(attrs={
            'placeholder': 'YYYY-MM-DD (e.g., 2080-04-01)',
            'class': 'vDateField' # Django Admin's default class for date fields, for styling
        })
    )
    end_date_ad = NepaliDateField(
        label="End Date (Nepali)",
        widget=forms.TextInput(attrs={
            'placeholder': 'YYYY-MM-DD (e.g., 2081-03-31)',
            'class': 'vDateField' # Django Admin's default class for date fields
        })
    )

    class Meta:
        model = FiscalYear
        fields = ['start_date_ad', 'end_date_ad', 'name', 'is_active']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Make the 'name' field read-only in the admin form
        # It's auto-generated by the model's save method
        self.fields['name'].widget.attrs['readonly'] = True
        self.fields['name'].required = False # It's auto-generated, not required from user
        if not self.instance.pk: # For new instances, set a clearer help text
            self.fields['name'].help_text = "This field will be automatically generated upon saving."
        else: # For existing instances
            self.fields['name'].help_text = "This field is auto-generated based on the dates."